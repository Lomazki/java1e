 Тестовое задание №1 (для вакансии стажер-разработчик Java)

Инструкции по выполнении тестового задания:

Готовое тестовое задание разместить в своем репозитории на GitHub
Ссылку на готовое тестовое задание прислать рекрутеру
Выполнить задачу на Java без использования сторонних библиотек и фреймворков. Только Java Core (версия джавы 8+)

Что необходимо сделать:
Примитивное консольное приложение для создания/редактирования/просмотра пользователей и сохранения изменений в файл.

Что будет оцениваться:

Чистота кода
Следование практикам ООП и SOLID
Возможность расширения уже написанного кода (потенциальное добавление новых валидаторов, вариантов ввода)
Наличие шаблонов проектирование и уместность их использования

Приложение должно предоставлять возможность:
 - Создать пользователя со следующими параметрами: имя, фамилия, email, роли, мобильные телефоны и сохранить его в файл.
 - Кол-во телефонов от 1 до 3-х
 - Выбрать пользователю роли: USER (ур1), CUSTOMER(ур1), ADMIN (ур2), PROVIDER(ур2), SUPER_ADMIN (ур3)
 - Одновременно пользователь может иметь по 1 роли с каждого уровня, например: USER+ADMIN, CUSTOMER+PROVIDER,
    USER+PROVIDER, но не USER+CUSTOMER, ADMIN+PROVIDER
 - Если у пользователя указана роль SUPER_ADMIN - другие роли выбирать запрещено
 - При попытке ввести некорректное кол-во или сочетание записей выводить сообщение о том, что кол-во
    неверно и дать повторить попытку ввода.

Валидировать email и телефоны:
телефоны должны быть в виде 375 *****, к примеру, | 37500 1234567 |.
email в виде *****@*****.*, к примеру, | any@email.com |. Т.е. достаточно проверки на ‘@’ и точку
Редактировать уже существующего пользователя.
учесть все валидации и ошибки из предыдущего пункта
Удалить пользователя.
Получать информацию о пользователе, его ролях и телефонах (вывод на консоль).
Получить и вывести всех пользователей
Консольный ввод



Review 

Коммит сообщения не информативны. Можно взять для примера https://habr.com/ru/post/416887/.
Нет понимания чем отличаются checked/unchecked exceptions и в каких случаях используются.
Присутствуют нарушения принципа Dependency Inversion.
Не все необходимые папки создаются во время выполнения приложения, приложение падает с ошибкой и завершает работу (по-моему приложение не должно завершать работу в таком случае падения checked/unchecked exceptions). Не понятно зачем используются сетеры в Enum, по-моему нет хорошего понимания что такое Enum и цель его использования. Нарушение принципа YAGNI, например, UserRepositoryImpl.class содержит неиспользуемые в коде методы. Использование ArrayList вместо LinkedList при операциях вставки в конец элементов и без получения элемента по номеру элемента в списке. Синглтон UserRepositoryImpl по-моему следовало реализовать через Enum, а не статическую переменную (для разрешения Блокировки с двойной проверкой).

Создание пользователя работает после создания папки resources. Это нигде не указано, а значит проект не может представлен как завершенный.
Работа проекта оканчивается при выполнении одной из задач CRUD. 
Хотелось бы выходить из программы по собственному желанию, а не запускать проект для выполнения одной задачи (казалось бы зачем в таком случае использовались возможности многопоточности, по-моему это оверхед)
Надеюсь, эти моменты помогут тебе в дальнейшем. Уверена, это наша не последняя встреча и в будущем мы сможем еще увидеться)

https://habr.com/ru/post/416887/
